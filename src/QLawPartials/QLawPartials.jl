function calculate_semi_analytic_partials(t, X, params::QLawParams{Oguri})
    # Unpack everything
    a, e, inc, ape, lam, tru = X
    Woe = params.Woe
    Wa, We, Winc, Wape, Wlam = Woe
    Aimp = params.Aimp
    Aesc = params.Aesc
    kimp = params.kimp
    kesc = params.kesc
    amax = params.a_esc
    rpmin = params.rp_min
    oet = params.oet
    a_t, e_t, inc_t, ape_t, lam_t = oet
    m_petro = params.m_petro
    n_petro = params.n_petro
    r_petro = params.r_petro
    ksgn = params.ksgn
    kabs = params.kabs
    mu = params.mu
    mu_sun = params.mu_sun
    a_over_m = params.sc.areaParam
    C1, C2, C3 = params.sc.C
    Wp = params.Wp

    # Calculate some preliminary terms
    eph = params.eph
    ephState = getState(eph, t)
    d_cb_to_sun = norm(view(ephState, 1:3))
    G0 = get_solar_flux(eph.targ)
    coe = getCOE(eph, t)
    a_E = coe[1];
    e_E = coe[2];
    tru_E = coe[3];
    nudot_earth = (1+e_E*cos(tru_E))^2 / (1-e_E^2)^(3/2) * sqrt(mu_sun/a_E^3);

    # Check which version to use (either with n=1 in the nustar_e term or with n=0)
    @infiltrate true
    edotnn1 = edotnn_numeric(a, e, inc, ape, lam, e_t,G0, d_cb_to_sun, mu,a_over_m, C1, C2, C3, ksgn, 1)
    edotnn2 = edotnn_numeric(a, e, inc, ape, lam, e_t,G0, d_cb_to_sun, mu,a_over_m, C1, C2, C3, ksgn, 0)
    if edotnn1 < edotnn2
        n = 1
    else
        n = 0
    end

    # Calculate the summation term of Q-Law
    Qsum = calculate_Q_summation(X, params, t, nudot_earth, d_cb_to_sun, a_E, e_E, tru_E, n, a_over_m, C1, C2, C3, G0)
    
    # Analytical partials
    dQda_an = dQda_an_oguri(a, e, inc, ape, lam, a_t, e_t, inc_t, ape_t, lam_t, e_E, a_E, tru_E,G0, d_cb_to_sun, mu, mu_sun,a_over_m, C1, C2, C3,
    Aimp, Aesc, kimp, kesc, rpmin, amax,m_petro, n_petro, r_petro, ksgn, kabs, Qsum,  Wa, We, Winc, Wape, Wlam, Wp, n)
    dQde_an = dQde_an_oguri(a, e, inc, ape, lam, a_t, e_t, inc_t, ape_t, lam_t, e_E, a_E, tru_E,G0, d_cb_to_sun, mu, mu_sun,a_over_m, C1, C2, C3,
    Aimp, Aesc, kimp, kesc, rpmin, amax,m_petro, n_petro, r_petro, ksgn, kabs, Qsum,  Wa, We, Winc, Wape, Wlam, Wp, n)
    dQdinc_an = dQdinc_an_oguri(a, e, inc, ape, lam, a_t, e_t, inc_t, ape_t, lam_t, e_E, a_E, tru_E,G0, d_cb_to_sun, mu, mu_sun,a_over_m, C1, C2, C3,
    Aimp, Aesc, kimp, kesc, rpmin, amax,m_petro, n_petro, r_petro, ksgn, kabs, Qsum,  Wa, We, Winc, Wape, Wlam, Wp, n)
    dQdape_an = dQdape_an_oguri(a, e, inc, ape, lam, a_t, e_t, inc_t, ape_t, lam_t, e_E, a_E, tru_E,G0, d_cb_to_sun, mu, mu_sun,a_over_m, C1, C2, C3,
    Aimp, Aesc, kimp, kesc, rpmin, amax,m_petro, n_petro, r_petro, ksgn, kabs, Qsum,  Wa, We, Winc, Wape, Wlam, Wp, n)
    dQdlam_an = dQdlam_an_oguri(a, e, inc, ape, lam, a_t, e_t, inc_t, ape_t, lam_t, e_E, a_E, tru_E,G0, d_cb_to_sun, mu, mu_sun,a_over_m, C1, C2, C3,
    Aimp, Aesc, kimp, kesc, rpmin, amax,m_petro, n_petro, r_petro, ksgn, kabs, Qsum,  Wa, We, Winc, Wape, Wlam, Wp, n)
    dQdtru_an = 0.;

    # Non analytical partials
    cl(x) = best_case_time_to_go_argument_perigee_sq(x, params::QLawParams{Oguri}, t, nudot_earth)
    cfg = ForwardDiff.GradientConfig(cl, X)
    gradient_fd = Wape*ForwardDiff.gradient(cl, X, cfg)
    dQda_fd, dQde_fd, dQdinc_fd, dQdape_fd, dQdlam_fd, dQdtru_fd = gradient_fd

    # add and return

    grad = SA[
        dQda_an+dQda_fd;
        dQde_an+dQde_fd;
        dQdinc_an+dQdinc_fd;
        dQdape_an+dQdape_fd;
        dQdlam_an+dQdlam_fd;
        dQdtru_an+dQdtru_fd;
    ]
    return grad

end

function best_case_time_to_go_argument_perigee_sq(X, params::QLawParams{Oguri}, t, nudot_earth)
    a, e, inc, ape, lam, tru = X
    mu = params.mu
    ape_t = params.oet[4]
    ksgn = params.ksgn
    kabs = params.kabs
    distape = acos(cos(ape - ape_t));
    sig_ape = sign_smooth(distape, ksgn);
    nudot = (1+e*cos(tru))^2 / (1-e^2)^(3/2) * sqrt(mu/a^3);
    p = a*(1-e^2)
    h = sqrt(mu*p)
    svec_P = SA[
        cos(lam)*cos(ape)-sin(lam)*cos(inc)*sin(ape);
        -cos(lam)*sin(ape)-sin(lam)*cos(inc)*cos(ape);
        sin(lam)*sin(inc)
    ]
    se = svec_P[1]; sp = svec_P[2]; sh = svec_P[3];

    eps_ape = SA[0; 0; 0; 1; 0; 0]
    nu = range(0, 2*pi, 200)  # 200 evenly spaced points from 0 to 2*pi
    mappedvals = Vector{Any}(undef, length(nu)) # initialize solution
    for i in range(1, length(nu))
        mappedvals[i] = sig_ape*p/(h*(1+e*cos(nu[i]))) * (1/e * sin(nu[i])*(-se*sin(nu[i])+sp*cos(nu[i])) - sin(nu[i]+ape)/tan(inc) * sh)
    end
    nustar_ape = nu[argmin(mappedvals)] # the nu that minimized mappedvals is the approx. nustar for ape

    # From here, it is the same as the others
    @infiltrate
    apedotnn = oedotnn(a, e, inc, ape, lam, nustar_ape, sig_ape, eps_ape, nudot, nudot_earth, params, t)

    τ_ape = abs_smooth(distape, kabs)/-apedotnn
    return τ_ape^2
end

function edotnn_numeric(a, e, inc, ape, lam, e_t,G0, d_cb_to_sun, mu,a_over_m, C1, C2, C3, ksgn, n)
    r_sc_sun = d_cb_to_sun
    t2 = cos(ape);
    t3 = cos(inc);
    t4 = cos(lam);
    t5 = sin(ape);
    t6 = sin(inc);
    t7 = sin(lam);
    t8 = n*3.141592653589793;
    t9 = e*e;
    t10 = -e_t;
    t11 = 1.0/(r_sc_sun*r_sc_sun);
    t12 = t4*t5;
    t13 = t2*t4;
    t14 = t9-1.0;
    t15 = e+t10;
    t16 = t2*t3*t7;
    t17 = t3*t5*t7;
    t18 = ksgn*t15;
    t19 = a*t14;
    t22 = -t17;
    t25 = t12+t16;
    t20 = mu*t19;
    t21 = tanh(t18);
    t26 = t13+t22;
    t27 = t25*t25;
    t23 = t21*t21;
    t24 = -t20;
    t29 = t26*t26;
    t30 = t21*t25;
    t28 = 1.0/sqrt(t24);
    t31 = t23*t27;
    t32 = t23*t29;
    t33 = t31+t32;
    t34 = sqrt(t33);
    t35 = t30+t34;
    t36 = 1.0/t35;
    t37 = t21*t26*t36;
    t38 = atan(t37);
    t39 = t8+t38;
    t40 = ape+t39;
    t41 = cos(t39);
    t42 = sin(t39);
    t43 = cos(t40);
    t44 = sin(t40);
    t45 = e*t41;
    t61 = t6*t7*t19*t21*t28*t42;
    t46 = t4*t43;
    t47 = t7*t43;
    t48 = t4*t44;
    t49 = t7*t44;
    t50 = t45+1.0;
    t62 = -t61;
    t51 = t3*t46;
    t52 = t3*t47;
    t53 = t3*t48;
    t54 = t3*t49;
    t55 = 1.0/t50;
    t56 = -t51;
    t57 = -t54;
    t58 = t19*t55;
    t63 = t47+t53;
    t64 = t48+t52;
    t59 = e*t58;
    t60 = t19+t58;
    t65 = t46+t57;
    t66 = t49+t56;
    t69 = t19*t21*t28*t42*t64;
    t67 = t41*t60;
    t70 = t19*t21*t28*t42*t65;
    t68 = t59+t67;
    t71 = t4*t6*t21*t28*t68;
    t74 = t21*t28*t63*t68;
    t75 = t21*t28*t66*t68;
    t72 = t62+t71;
    t73 = pow(t61-t71,2.0);
    t76 = t70+t74;
    t77 = t69+t75;
    t78 = t76*t76;
    t79 = t77*t77;
    t80 = t73+t79;
    t81 = 1.0/t80;
    t82 = sqrt(t80);
    t83 = 1.0/t82;
    t84 = t72+t82;
    t86 = t78*t81*9.0;
    t85 = 1.0/t84;
    t87 = t76*t83*(3.0/4.0);
    t88 = t86+8.0;
    t89 = sqrt(t88);
    t92 = t77*t85;
    t90 = t89/4.0;
    t93 = atan(t92);
    t91 = -t90;
    t94 = t93*2.0;
    t95 = t87+t91;
    t96 = atan(t95);
    t97 = t95*t95;
    t98 = t96*2.0;
    t99 = t97+1.0;
    t100 = cos(t98);
    t101 = sin(t98);
    t105 = 1.0/t99;
    t106 = 1.0/sqrt(t99);
    t102 = C2*t100;
    t104 = C2*t101*2.0;
    t107 = C1*t105*3.0;
    t108 = C3*t106;
    t109 = C2*t106*2.0;
    t110 = t106*9.0;
    t113 = t97*t105*3.0;
    t103 = t102*2.0;
    t111 = t110-2.0;
    t112 = t95*t107;
    t114 = t113-1.0;
    t115 = C3+t107+t109;
    t116 = C1*t106*t114;
    t117 = C1*t95*t106*t111;
    t119 = t103+t108+t112;
    t122 = t76*t83*t95*t106*t115;
    t118 = -t116;
    t120 = t76*t83*t119;
    t121 = -t120;
    t124 = t102+t118+t122;
    t123 = t104+t117+t121;
    t125 = 1.0/t123;
    t126 = t124*t125;
    t127 = t96+t126;
    t128 = cos(t127);
    t129 = sin(t127);
    t130 = C1*t128;
    t131 = C2+t130;
    t0 = -G0*a_over_m*t11*t76*t128*(C3+C2*t128+t128*t130)+G0*a_over_m*t11*t77*t128*t129*t131*sin(t94)-G0*a_over_m*t11*t128*t129*t131*cos(t94)*(t61-t71);
    return t0
end

"""
    function calculate_Q_summation(X, params::QLawParams{Oguri}, t, nudot_earth, d_cb_to_sun, a_E, e_E, tru_E, n, a_over_m, C1, C2, C3)

Calculate the summation part of the proximity quotient: `Wa*Sa*τ_a^2 + We*τ_e^2 + Winc*τ_inc^2 + Wape*τ_ape^2 + Wlam*tau_lam^2`
"""
function calculate_Q_summation(X, params::QLawParams{Oguri}, t, nudot_earth, d_cb_to_sun, a_E, e_E, tru_E, n, a_over_m, C1, C2, C3, G0)
    a, e, inc, ape, lam, tru = X
    a_t,e_t, inc_t, ape_t, lam_t = params.oet
    ksgn = params.ksgn
    kabs = params.kabs
    mu = params.mu
    mu_sun = params.mu_sun
    m_petro = params.m_petro
    n_petro = params.n_petro
    r_petro = params.r_petro
    Wp = params.Wp
    Wa, We, Winc, Wape, Wlam = params.Woe
    tau_ape_sq = Wape*best_case_time_to_go_argument_perigee_sq(X, params, t, nudot_earth)
    r_sc_sun = d_cb_to_sun
    t2 = cos(ape);
    t3 = cos(inc);
    t4 = cos(lam);
    t5 = sin(ape);
    t6 = sin(inc);
    t7 = sin(lam);
    t8 = n*3.141592653589793;
    t9 = a*a;
    t10 = e*e;
    t17 = -a_t;
    t18 = -ape;
    t19 = -e_t;
    t20 = -inc_t;
    t21 = 1.0/kabs;
    t22 = -lam_t;
    t23 = 1.0/mu;
    t24 = 1.0/(r_sc_sun*r_sc_sun);
    t28 = 3.141592653589793/2.0;
    t11 = t3*t3;
    t12 = t4*t4;
    t13 = t6*t6;
    t14 = t7*t7;
    t15 = e*t2;
    t16 = e*t5;
    t25 = t4*t5;
    t26 = 1.0/t6;
    t30 = t2*t4;
    t32 = t10-1.0;
    t33 = a+t17;
    t34 = e+t19;
    t35 = inc+t20;
    t36 = lam+t22;
    t37 = t2*t3*t7;
    t38 = t3*t5*t7;
    t27 = 1.0/t13;
    t29 = acos(t15);
    t31 = asin(t16);
    t39 = cos(t36);
    t40 = ksgn*t33;
    t41 = ksgn*t34;
    t43 = ksgn*t35;
    t44 = a*t32;
    t49 = -t38;
    t57 = t25+t37;
    t42 = acos(t39);
    t45 = mu*t44;
    t46 = tanh(t40);
    t47 = tanh(t41);
    t48 = tanh(t43);
    t51 = t28+t31;
    t59 = t30+t49;
    t62 = t57*t57;
    t50 = ksgn*t42;
    t52 = t46*t46;
    t53 = t47*t47;
    t54 = t48*t48;
    t55 = -t45;
    t61 = ksgn*t6*t7*t48;
    t66 = t59*t59;
    t68 = t46*t57;
    t69 = t47*t57;
    t56 = tanh(t50);
    t63 = 1.0/sqrt(t55);
    t65 = tanh(t61);
    t77 = t52*t62;
    t78 = t53*t62;
    t81 = t52*t66;
    t82 = t53*t66;
    t58 = t56*t56;
    t60 = ksgn*t6*t56;
    t80 = t51*t65;
    t99 = t77+t81;
    t100 = t78+t82;
    t64 = tanh(t60);
    t85 = t28+t80;
    t101 = sqrt(t99);
    t102 = sqrt(t100);
    t67 = t29*t64;
    t86 = cos(t85);
    t89 = sin(t85);
    t93 = t18+t85;
    t103 = -t101;
    t104 = t69+t102;
    t70 = cos(t67);
    t71 = sin(t67);
    t72 = -t67;
    t90 = t86*t86;
    t92 = t89*t89;
    t94 = cos(t93);
    t105 = 1.0/t104;
    t106 = t68+t103;
    t73 = t70*t70;
    t74 = t71*t71;
    t76 = ape+t72;
    t91 = t90*t90;
    t95 = e*t94;
    t107 = 1.0/t106;
    t116 = t47*t59*t105;
    t75 = t74*t74;
    t79 = cos(t76);
    t96 = t95+1.0;
    t117 = atan(t116);
    t118 = t46*t59*t107;
    t83 = e*t79;
    t97 = 1.0/t96;
    t120 = atan(t118);
    t121 = t8+t117;
    t84 = t83-1.0;
    t98 = t97*t97;
    t119 = t3*t44*t48*t63*t86*t97;
    t124 = t120*2.0;
    t125 = ape+t121;
    t126 = cos(t121);
    t127 = sin(t121);
    t87 = 1.0/t84;
    t112 = t11*t23*t44*t54*t90*t98;
    t113 = t13*t23*t44*t54*t91*t98;
    t122 = -t119;
    t128 = cos(t125);
    t129 = sin(t125);
    t130 = -t124;
    t131 = cos(t124);
    t132 = sin(t124);
    t134 = e*t126;
    t166 = t6*t7*t44*t47*t63*t127;
    t88 = t87*t87;
    t110 = t4*t26*t44*t56*t63*t71*t87;
    t114 = -t112;
    t115 = -t113;
    t135 = ape+t130;
    t136 = e*t131;
    t137 = t4*t128;
    t138 = t7*t128;
    t139 = t4*t129;
    t140 = t7*t129;
    t143 = t134+1.0;
    t165 = e*t6*t7*t9*t46*t63*t132*2.0;
    t168 = -t166;
    t172 = t112+t113;
    t108 = t12*t23*t27*t44*t58*t74*t88;
    t111 = -t110;
    t123 = t14*t23*t27*t44*t58*t73*t74*t88;
    t141 = cos(t135);
    t142 = sin(t135);
    t144 = t136+1.0;
    t145 = t3*t137;
    t146 = t3*t138;
    t147 = t3*t139;
    t148 = t3*t140;
    t149 = 1.0/t143;
    t175 = 1.0/t172;
    t176 = t114+t115;
    t109 = -t108;
    t133 = -t123;
    t150 = t4*t141;
    t151 = t7*t141;
    t152 = t4*t142;
    t153 = t7*t142;
    t154 = -t145;
    t155 = -t148;
    t162 = t44*t149;
    t167 = t4*t6*t9*t46*t63*t144*2.0;
    t169 = t108+t123;
    t177 = sqrt(t176);
    t179 = t138+t147;
    t180 = t139+t146;
    t200 = t13*t23*t44*t54*t90*t92*t98*t175*9.0;
    t156 = t3*t150;
    t157 = t3*t151;
    t158 = t3*t152;
    t159 = t3*t153;
    t163 = e*t162;
    t164 = t44+t162;
    t170 = 1.0/t169;
    t171 = t109+t133;
    t178 = 1.0/t177;
    t181 = t137+t155;
    t182 = t140+t154;
    t189 = t165+t167;
    t199 = -1.0/(t119-t177);
    t201 = t200+8.0;
    t207 = t44*t47*t63*t127*t180;
    t160 = -t156;
    t161 = -t159;
    t173 = sqrt(t171);
    t183 = t151+t158;
    t184 = t152+t157;
    t187 = t126*t164;
    t188 = t14*t23*t27*t44*t58*t75*t88*t170*9.0;
    t190 = t189*t189;
    t202 = sqrt(t201);
    t204 = t6*t44*t48*t63*t86*t89*t97*t178*(3.0/4.0);
    t208 = t44*t47*t63*t127*t181;
    t219 = t6*t44*t48*t63*t90*t97*t199;
    t174 = 1.0/t173;
    t185 = t150+t161;
    t186 = t153+t160;
    t191 = t188+8.0;
    t193 = t190/4.0;
    t197 = -1.0/(t110-t173);
    t203 = t202/4.0;
    t205 = -t204;
    t206 = t163+t187;
    t209 = e*t9*t46*t63*t132*t184*2.0;
    t212 = t9*t46*t63*t144*t183*2.0;
    t220 = atan(t219);
    t192 = sqrt(t191);
    t196 = t7*t26*t44*t56*t63*t74*t87*t174*(3.0/4.0);
    t211 = e*t9*t46*t63*t132*t185*2.0;
    t214 = t9*t46*t63*t144*t186*2.0;
    t215 = t4*t6*t47*t63*t206;
    t216 = t7*t26*t44*t56*t63*t70*t71*t87*t197;
    t221 = t220*2.0;
    t241 = t47*t63*t179*t206;
    t242 = t47*t63*t182*t206;
    t243 = t203+t205;
    t194 = t192/4.0;
    t217 = atan(t216);
    t222 = t168+t215;
    t223 = pow(t166-t215,2.0);
    t244 = atan(t243);
    t245 = t243*t243;
    t263 = pow(t211-t212,2.0);
    t264 = pow(t209-t214,2.0);
    t266 = t208+t241;
    t267 = t207+t242;
    t218 = t217*2.0;
    t224 = t194+t196;
    t246 = t244*2.0;
    t249 = t245+1.0;
    t265 = t264/4.0;
    t268 = t266*t266;
    t269 = t267*t267;
    t225 = atan(t224);
    t226 = t224*t224;
    t247 = cos(t246);
    t248 = sin(t246);
    t251 = 1.0/t249;
    t255 = 1.0/sqrt(t249);
    t270 = t193+t265;
    t288 = t223+t269;
    t227 = t225*2.0;
    t228 = t226+1.0;
    t250 = C2*t247;
    t253 = C2*t248*2.0;
    t256 = C1*t251*3.0;
    t257 = C3*t255;
    t258 = t255*9.0;
    t259 = C2*t255*2.0;
    t271 = 1.0/t270;
    t272 = sqrt(t270);
    t284 = C1*t243*t251*-3.0;
    t285 = t245*t251*3.0;
    t289 = 1.0/t288;
    t290 = sqrt(t288);
    t229 = cos(t227);
    t230 = sin(t227);
    t234 = 1.0/t228;
    t235 = 1.0/sqrt(t228);
    t252 = t250*2.0;
    t254 = -t250;
    t260 = t258-2.0;
    t273 = 1.0/t272;
    t274 = t272*2.0;
    t286 = t285-1.0;
    t287 = C3+t256+t259;
    t291 = 1.0/t290;
    t293 = t263*t271*(9.0/4.0);
    t300 = t222+t290;
    t308 = t268*t289*9.0;
    t231 = C2*t229;
    t233 = C2*t230*2.0;
    t236 = C1*t234*3.0;
    t237 = C3*t235;
    t238 = C2*t235*2.0;
    t239 = t235*9.0;
    t275 = -t274;
    t277 = C1*t224*t234*-3.0;
    t278 = t226*t234*3.0;
    t292 = t273*(t211-t212)*(-3.0/8.0);
    t294 = t293+8.0;
    t301 = 1.0/t300;
    t305 = C1*t255*t286;
    t306 = C1*t243*t255*t260;
    t309 = t266*t291*(3.0/4.0);
    t310 = t308+8.0;
    t317 = t252+t257+t284;
    t322 = t6*t44*t48*t63*t86*t89*t97*t178*t243*t255*t287;
    t232 = t231*2.0;
    t240 = t239-2.0;
    t279 = t278-1.0;
    t280 = C3+t236+t238;
    t281 = t189+t275;
    t295 = sqrt(t294);
    t311 = sqrt(t310);
    t318 = t267*t301;
    t321 = t6*t44*t48*t63*t86*t89*t97*t178*t317;
    t362 = t254+t305+t322;
    t282 = 1.0/t281;
    t296 = C1*t235*t279;
    t297 = C1*t224*t235*t240;
    t299 = t295/4.0;
    t307 = t232+t237+t277;
    t312 = t311/4.0;
    t316 = t7*t26*t44*t56*t63*t74*t87*t174*t224*t235*t280;
    t319 = atan(t318);
    t360 = t253+t306+t321;
    t298 = -t296;
    t302 = -t282*(t209-t214);
    t313 = -t312;
    t314 = t7*t26*t44*t56*t63*t74*t87*t174*t307;
    t320 = t319*2.0;
    t323 = t292+t299;
    t361 = 1.0/t360;
    t303 = atan(t302);
    t315 = -t314;
    t324 = atan(t323);
    t325 = t323*t323;
    t340 = t309+t313;
    t358 = t231+t298+t316;
    t381 = t361*t362;
    t304 = t303*2.0;
    t326 = t324*2.0;
    t327 = t325+1.0;
    t341 = atan(t340);
    t342 = t340*t340;
    t357 = t233+t297+t315;
    t382 = -t381;
    t328 = cos(t326);
    t329 = sin(t326);
    t333 = 1.0/t327;
    t334 = 1.0/sqrt(t327);
    t343 = t341*2.0;
    t344 = t342+1.0;
    t359 = 1.0/t357;
    t383 = t244+t382;
    t330 = C2*t328;
    t332 = C2*t329*2.0;
    t335 = C1*t333*3.0;
    t336 = C3*t334;
    t337 = t334*9.0;
    t338 = C2*t334*2.0;
    t345 = cos(t343);
    t346 = sin(t343);
    t350 = 1.0/t344;
    t351 = 1.0/sqrt(t344);
    t364 = C1*t323*t333*-3.0;
    t365 = t325*t333*3.0;
    t372 = t358*t359;
    t384 = cos(t383);
    t385 = sin(t383);
    t331 = t330*2.0;
    t339 = t337-2.0;
    t347 = C2*t345;
    t349 = C2*t346*2.0;
    t352 = C1*t350*3.0;
    t353 = C3*t351;
    t354 = C2*t351*2.0;
    t355 = t351*9.0;
    t366 = t365-1.0;
    t367 = C3+t335+t338;
    t369 = t342*t350*3.0;
    t373 = t225+t372;
    t386 = C1*t384;
    t348 = t347*2.0;
    t356 = t355-2.0;
    t368 = t340*t352;
    t370 = t369-1.0;
    t371 = C3+t352+t354;
    t374 = cos(t373);
    t375 = sin(t373);
    t378 = C1*t334*t366;
    t379 = C1*t323*t334*t339;
    t387 = C2+t386;
    t388 = t331+t336+t364;
    t376 = C1*t374;
    t389 = C1*t351*t370;
    t390 = C1*t340*t351*t356;
    t393 = (t273*t388*(t211-t212))/2.0;
    t395 = t348+t353+t368;
    t398 = t266*t291*t340*t351*t371;
    t377 = C2+t376;
    t391 = -t389;
    t396 = t266*t291*t395;
    t399 = t332+t379+t393;
    t397 = -t396;
    t401 = 1.0/t399;
    t403 = t347+t391+t398;
    t402 = t349+t390+t397;
    t405 = -t401*(-t330+t378+(t273*t323*t334*t367*(t211-t212))/2.0);
    t404 = 1.0/t402;
    t406 = t324+t405;
    t407 = cos(t406);
    t408 = sin(t406);
    t411 = t403*t404;
    t409 = C1*t407;
    t412 = t341+t411;
    t410 = C2+t409;
    t413 = cos(t412);
    t414 = sin(t412);
    t415 = C1*t413;
    t416 = C2+t415;
    t0 = Wlam*(t42*t42)*pow(tanh(t21*t42),2.0)*1.0/pow(t56*1.0/pow(-e_E*e_E+1.0,3.0/2.0)*sqrt(1.0/(a_E*a_E*a_E)*mu_sun)*pow(e_E*cos(tru_E)+1.0,2.0)+G0*a_over_m*t24*t111*t374*t375*t377*cos(t218)-G0*a_over_m*t7*t24*t26*t44*t56*t63*t74*t87*t374*(C3+C2*t374+t374*t376)+G0*a_over_m*t7*t24*t26*t44*t56*t63*t70*t71*t87*t374*t375*t377*sin(t218),2.0)+Winc*(t35*t35)*pow(tanh(t21*t35),2.0)*1.0/pow(G0*a_over_m*t24*t122*t384*t385*t387*cos(t221)+G0*a_over_m*t6*t24*t44*t48*t63*t86*t89*t97*t384*(C3+C2*t384+t384*t386)+G0*a_over_m*t6*t24*t44*t48*t63*t90*t97*t384*t385*t387*sin(t221),2.0)+We*(t34*t34)*pow(tanh(t21*t34),2.0)*1.0/pow(G0*a_over_m*t24*t266*t413*(C3+C2*t413+t413*t415)-G0*a_over_m*t24*t267*t413*t414*t416*sin(t320)+G0*a_over_m*t24*t413*t414*t416*cos(t320)*(t166-t215),2.0)+Wa*(t33*t33)*pow(tanh(t21*t33),2.0)*pow(pow(t33/(a_t*m_petro),n_petro)+1.0,1.0/r_petro)*1.0/pow(G0*a_over_m*t24*t407*(t211-t212)*(C3+C2*t407+t407*t409)-G0*a_over_m*t24*t189*t407*t408*t410*cos(t304)+G0*a_over_m*t24*t407*t408*t410*sin(t304)*(t209-t214),2.0);
  

    return t0 + Wape*tau_ape_sq
end

